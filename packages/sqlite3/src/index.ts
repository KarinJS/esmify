import * as sqlite3 from 'sqlite3'
import { Database, Statement, verbose, cached } from 'sqlite3'

const {
  OPEN_READONLY,
  OPEN_READWRITE,
  OPEN_CREATE,
  OPEN_FULLMUTEX,
  OPEN_SHAREDCACHE,
  OPEN_PRIVATECACHE,
  OPEN_URI,
  VERSION,
  SOURCE_ID,
  VERSION_NUMBER,
  OK,
  ERROR,
  INTERNAL,
  PERM,
  ABORT,
  BUSY,
  LOCKED,
  NOMEM,
  READONLY,
  INTERRUPT,
  IOERR,
  CORRUPT,
  NOTFOUND,
  FULL,
  CANTOPEN,
  PROTOCOL,
  EMPTY,
  SCHEMA,
  TOOBIG,
  CONSTRAINT,
  MISMATCH,
  MISUSE,
  NOLFS,
  AUTH,
  FORMAT,
  RANGE,
  NOTADB,
  LIMIT_LENGTH,
  LIMIT_SQL_LENGTH,
  LIMIT_COLUMN,
  LIMIT_EXPR_DEPTH,
  LIMIT_COMPOUND_SELECT,
  LIMIT_VDBE_OP,
  LIMIT_FUNCTION_ARG,
  LIMIT_ATTACHED,
  LIMIT_LIKE_PATTERN_LENGTH,
  LIMIT_VARIABLE_NUMBER,
  LIMIT_TRIGGER_DEPTH,
  LIMIT_WORKER_THREADS,
} = sqlite3

export {
  cached,
  verbose,
  Statement,
  Database,
  sqlite3 as default,
  OPEN_READONLY,
  OPEN_READWRITE,
  OPEN_CREATE,
  OPEN_FULLMUTEX,
  OPEN_SHAREDCACHE,
  OPEN_PRIVATECACHE,
  OPEN_URI,
  VERSION,
  SOURCE_ID,
  VERSION_NUMBER,
  OK,
  ERROR,
  INTERNAL,
  PERM,
  ABORT,
  BUSY,
  LOCKED,
  NOMEM,
  READONLY,
  INTERRUPT,
  IOERR,
  CORRUPT,
  NOTFOUND,
  FULL,
  CANTOPEN,
  PROTOCOL,
  EMPTY,
  SCHEMA,
  TOOBIG,
  CONSTRAINT,
  MISMATCH,
  MISUSE,
  NOLFS,
  AUTH,
  FORMAT,
  RANGE,
  NOTADB,
  LIMIT_LENGTH,
  LIMIT_SQL_LENGTH,
  LIMIT_COLUMN,
  LIMIT_EXPR_DEPTH,
  LIMIT_COMPOUND_SELECT,
  LIMIT_VDBE_OP,
  LIMIT_FUNCTION_ARG,
  LIMIT_ATTACHED,
  LIMIT_LIKE_PATTERN_LENGTH,
  LIMIT_VARIABLE_NUMBER,
  LIMIT_TRIGGER_DEPTH,
  LIMIT_WORKER_THREADS,
}

export type {
  RunResult,
  sqlite3,
} from 'sqlite3'
